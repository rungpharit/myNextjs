{"ast":null,"code":"var _regeneratorRuntime = require(\"@babel/runtime-corejs2/regenerator\");\n\nvar express = require('express');\n\nvar app = express();\n\nvar path = require('path');\n\nvar uuid = require('uuid');\n\nvar mongoose = require('mongoose');\n\nvar TodoList = require('./models/todos'); //Connect mongoDB\n\n\nmongoose.connect('mongodb://localhost:27017/node-api', {\n  useNewUrlParser: true\n}); //Handle Error\n\nmongoose.connection.on('error', function (err) {\n  console.error('MongoDB error', err);\n}); //Body Parser Middleware\n\napp.use(express.json());\napp.use(express.urlencoded({\n  extended: false\n}));\nvar todos = [{}];\napp.get('/', function (req, res) {\n  res.send('<div>hello</div>');\n}); //Get Data\n\napp.get('/api/todos', function _callee(req, res) {\n  var todos;\n  return _regeneratorRuntime.async(function _callee$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.next = 2;\n          return _regeneratorRuntime.awrap(TodoList.find({}));\n\n        case 2:\n          todos = _context.sent;\n          res.json(todos);\n\n        case 4:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  });\n}); //Insert Data\n\napp.post('/api/todos', function _callee2(req, res) {\n  var payload, todolist;\n  return _regeneratorRuntime.async(function _callee2$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          payload = req.body;\n          todolist = new TodoList(payload);\n          _context2.next = 4;\n          return _regeneratorRuntime.awrap(todolist.save());\n\n        case 4:\n          res.status(201).end();\n\n        case 5:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  });\n}); //Delete Data\n\napp[\"delete\"]('/api/todos/:id', function _callee3(req, res) {\n  var id;\n  return _regeneratorRuntime.async(function _callee3$(_context3) {\n    while (1) {\n      switch (_context3.prev = _context3.next) {\n        case 0:\n          id = req.params.id;\n          console.log(id);\n          _context3.next = 4;\n          return _regeneratorRuntime.awrap(TodoList.findByIdAndDelete(id));\n\n        case 4:\n          res.json({\n            msg: 'dele'\n          });\n          res.status(204).end();\n\n        case 6:\n        case \"end\":\n          return _context3.stop();\n      }\n    }\n  });\n});\nvar PORT = process.env.PORT || 5000;\napp.listen(PORT, function () {\n  return console.log(\"Server started on port \".concat(PORT));\n});","map":{"version":3,"sources":["D:/XAMPP/htdocs/learning/nextjs/nextjs_todo/server.js"],"names":["express","require","app","path","uuid","mongoose","TodoList","connect","useNewUrlParser","connection","on","err","console","error","use","json","urlencoded","extended","todos","get","req","res","send","find","post","payload","body","todolist","save","status","end","id","params","log","findByIdAndDelete","msg","PORT","process","env","listen"],"mappings":";;AAAA,IAAMA,OAAO,GAAGC,OAAO,CAAC,SAAD,CAAvB;;AACA,IAAMC,GAAG,GAAGF,OAAO,EAAnB;;AACA,IAAMG,IAAI,GAAGF,OAAO,CAAC,MAAD,CAApB;;AACA,IAAMG,IAAI,GAAGH,OAAO,CAAC,MAAD,CAApB;;AACA,IAAMI,QAAQ,GAAGJ,OAAO,CAAC,UAAD,CAAxB;;AACA,IAAMK,QAAQ,GAAGL,OAAO,CAAC,gBAAD,CAAxB,C,CAEA;;;AACAI,QAAQ,CAACE,OAAT,CAAiB,oCAAjB,EAAuD;AAAEC,EAAAA,eAAe,EAAE;AAAnB,CAAvD,E,CAEA;;AACAH,QAAQ,CAACI,UAAT,CAAoBC,EAApB,CAAuB,OAAvB,EAAgC,UAAAC,GAAG,EAAI;AACrCC,EAAAA,OAAO,CAACC,KAAR,CAAc,eAAd,EAA+BF,GAA/B;AACD,CAFD,E,CAIA;;AACAT,GAAG,CAACY,GAAJ,CAAQd,OAAO,CAACe,IAAR,EAAR;AACAb,GAAG,CAACY,GAAJ,CAAQd,OAAO,CAACgB,UAAR,CAAmB;AAAEC,EAAAA,QAAQ,EAAE;AAAZ,CAAnB,CAAR;AAEA,IAAMC,KAAK,GAAG,CAAC,EAAD,CAAd;AAEAhB,GAAG,CAACiB,GAAJ,CAAQ,GAAR,EAAa,UAACC,GAAD,EAAKC,GAAL,EAAa;AACxBA,EAAAA,GAAG,CAACC,IAAJ,CAAS,kBAAT;AACD,CAFD,E,CAIA;;AACApB,GAAG,CAACiB,GAAJ,CAAQ,YAAR,EAAsB,iBAAOC,GAAP,EAAWC,GAAX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,2CACAf,QAAQ,CAACiB,IAAT,CAAc,EAAd,CADA;;AAAA;AACdL,UAAAA,KADc;AAEpBG,UAAAA,GAAG,CAACN,IAAJ,CAASG,KAAT;;AAFoB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,CAAtB,E,CAKA;;AACAhB,GAAG,CAACsB,IAAJ,CAAS,YAAT,EAAuB,kBAAOJ,GAAP,EAAWC,GAAX;AAAA;AAAA;AAAA;AAAA;AAAA;AACfI,UAAAA,OADe,GACLL,GAAG,CAACM,IADC;AAEfC,UAAAA,QAFe,GAEJ,IAAIrB,QAAJ,CAAamB,OAAb,CAFI;AAAA;AAAA,2CAGfE,QAAQ,CAACC,IAAT,EAHe;;AAAA;AAIrBP,UAAAA,GAAG,CAACQ,MAAJ,CAAW,GAAX,EAAgBC,GAAhB;;AAJqB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,CAAvB,E,CAOA;;AACA5B,GAAG,UAAH,CAAW,gBAAX,EAA6B,kBAAOkB,GAAP,EAAWC,GAAX;AAAA;AAAA;AAAA;AAAA;AAAA;AACpBU,UAAAA,EADoB,GACdX,GAAG,CAACY,MADU,CACpBD,EADoB;AAE3BnB,UAAAA,OAAO,CAACqB,GAAR,CAAYF,EAAZ;AAF2B;AAAA,2CAGrBzB,QAAQ,CAAC4B,iBAAT,CAA2BH,EAA3B,CAHqB;;AAAA;AAK3BV,UAAAA,GAAG,CAACN,IAAJ,CAAS;AAACoB,YAAAA,GAAG,EAAC;AAAL,WAAT;AACAd,UAAAA,GAAG,CAACQ,MAAJ,CAAW,GAAX,EAAgBC,GAAhB;;AAN2B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,CAA7B;AAUA,IAAMM,IAAI,GAAGC,OAAO,CAACC,GAAR,CAAYF,IAAZ,IAAoB,IAAjC;AAEAlC,GAAG,CAACqC,MAAJ,CAAWH,IAAX,EAAgB;AAAA,SAAMxB,OAAO,CAACqB,GAAR,kCAAsCG,IAAtC,EAAN;AAAA,CAAhB","sourcesContent":["const express = require('express');\r\nconst app = express(); \r\nconst path = require('path');\r\nconst uuid = require('uuid');\r\nconst mongoose = require('mongoose');\r\nconst TodoList = require('./models/todos');\r\n\r\n//Connect mongoDB\r\nmongoose.connect('mongodb://localhost:27017/node-api', { useNewUrlParser: true })\r\n\r\n//Handle Error\r\nmongoose.connection.on('error', err => {\r\n  console.error('MongoDB error', err)\r\n})\r\n\r\n//Body Parser Middleware\r\napp.use(express.json())\r\napp.use(express.urlencoded({ extended: false }));\r\n\r\nconst todos = [{}]\r\n\r\napp.get('/', (req,res) => {\r\n  res.send('<div>hello</div>');\r\n});\r\n\r\n//Get Data\r\napp.get('/api/todos', async (req,res) => {\r\n  const todos = await TodoList.find({});\r\n  res.json(todos)\r\n});\r\n\r\n//Insert Data\r\napp.post('/api/todos', async (req,res) => {\r\n  const payload = req.body;\r\n  const todolist = new TodoList(payload);\r\n  await todolist.save()\r\n  res.status(201).end();\r\n});\r\n\r\n//Delete Data\r\napp.delete('/api/todos/:id', async (req,res) => {\r\n  const {id} = req.params;\r\n  console.log(id)\r\n  await TodoList.findByIdAndDelete(id)\r\n\r\n  res.json({msg:'dele'})\r\n  res.status(204).end()\r\n \r\n})\r\n\r\nconst PORT = process.env.PORT || 5000;\r\n\r\napp.listen(PORT,() => console.log(`Server started on port ${PORT}`));"]},"metadata":{},"sourceType":"script"}